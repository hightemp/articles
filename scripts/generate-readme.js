#!/usr/bin/env node

const fs = require('fs');
const path = require('path');

/**
 * –ò–∑–≤–ª–µ–∫–∞–µ—Ç –ø–µ—Ä–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏–∑ markdown —Ñ–∞–π–ª–∞
 * @param {string} filePath - –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
 * @returns {string|null} - –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏–ª–∏ null –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω
 */
function extractTitle(filePath) {
    try {
        const content = fs.readFileSync(filePath, 'utf-8');
        const lines = content.split('\n');
        
        for (const line of lines) {
            const trimmed = line.trim();
            // –ò—â–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ H1 (#) –∏–ª–∏ H3 (###)
            if (trimmed.startsWith('# ') || trimmed.startsWith('### ')) {
                return trimmed.replace(/^#+\s*/, '').trim();
            }
        }
        
        // –ï—Å–ª–∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
        return path.basename(filePath, '.md');
    } catch (error) {
        console.warn(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ ${filePath}:`, error.message);
        return path.basename(filePath, '.md');
    }
}

/**
 * –°–∫–∞–Ω–∏—Ä—É–µ—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ markdown —Ñ–∞–π–ª–æ–≤ —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
 * @param {string} dirPath - –ø—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
 * @returns {Array} - –º–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤ {title, filename, relativePath}
 */
function scanDirectory(dirPath) {
    const articles = [];
    
    try {
        const files = fs.readdirSync(dirPath);
        
        for (const file of files) {
            const filePath = path.join(dirPath, file);
            const stat = fs.statSync(filePath);
            
            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ .md —Ñ–∞–π–ª—ã
            if (stat.isFile() && path.extname(file) === '.md') {
                const title = extractTitle(filePath);
                const relativePath = path.relative('.', filePath);
                
                articles.push({
                    title,
                    filename: file,
                    relativePath
                });
            }
        }
    } catch (error) {
        console.warn(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ ${dirPath}:`, error.message);
    }
    
    return articles;
}

/**
 * URL-–∫–æ–¥–∏—Ä—É–µ—Ç –ø—É—Ç—å –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ markdown —Å—Å—ã–ª–∫–∞—Ö
 * @param {string} filePath - –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É
 * @returns {string} - –∑–∞–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—É—Ç—å
 */
function encodeMarkdownPath(filePath) {
    // –†–∞–∑–±–∏–≤–∞–µ–º –ø—É—Ç—å –Ω–∞ —á–∞—Å—Ç–∏ –∏ –∫–æ–¥–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é —á–∞—Å—Ç—å –æ—Ç–¥–µ–ª—å–Ω–æ
    return filePath.split('/').map(part => encodeURIComponent(part)).join('/');
}

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç markdown —Å–ø–∏—Å–æ–∫ —Å—Ç–∞—Ç–µ–π
 * @param {Array} articles - –º–∞—Å—Å–∏–≤ —Å—Ç–∞—Ç–µ–π
 * @param {string} sectionTitle - –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü–∏–∏
 * @returns {string} - markdown —Ç–µ–∫—Å—Ç
 */
function generateMarkdownSection(articles, sectionTitle) {
    if (articles.length === 0) {
        return `## ${sectionTitle}\n\n*–°—Ç–∞—Ç—å–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã*\n\n`;
    }
    
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ç—å–∏ –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫—É
    articles.sort((a, b) => a.title.localeCompare(b.title, 'ru'));
    
    let markdown = `## ${sectionTitle}\n\n`;
    
    for (const article of articles) {
        const encodedPath = encodeMarkdownPath(article.relativePath);
        markdown += `- [${article.title}](${encodedPath})\n`;
    }
    
    markdown += '\n';
    return markdown;
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ README
 */
function generateReadme() {
    console.log('üöÄ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è README.md...');
    
    // –°–∫–∞–Ω–∏—Ä—É–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    const ruArticles = scanDirectory('ru');
    const articlesEn = scanDirectory('articles');
    
    console.log(`üìö –ù–∞–π–¥–µ–Ω–æ —Å—Ç–∞—Ç–µ–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º: ${ruArticles.length}`);
    console.log(`üìö –ù–∞–π–¥–µ–Ω–æ —Å—Ç–∞—Ç–µ–π: ${articlesEn.length}`);
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ README
    let readmeContent = `# –ö–æ–ª–ª–µ–∫—Ü–∏—è —Å—Ç–∞—Ç–µ–π

–≠—Ç–æ—Ç —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–æ–ª–ª–µ–∫—Ü–∏—é —Å—Ç–∞—Ç–µ–π –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—é, —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è–º.

---

`;
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Å–µ–∫—Ü–∏—é —Å —Ä—É—Å—Å–∫–∏–º–∏ —Å—Ç–∞—Ç—å—è–º–∏
    readmeContent += generateMarkdownSection(ruArticles, 'üìñ –ü–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã–µ —Å—Ç–∞—Ç—å–∏');
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Å–µ–∫—Ü–∏—é —Å –∞–Ω–≥–ª–∏–π—Å–∫–∏–º–∏ —Å—Ç–∞—Ç—å—è–º–∏
    readmeContent += generateMarkdownSection(articlesEn, 'üìñ –°—Ç–∞—Ç—å–∏');
    
    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º README.md
    try {
        fs.writeFileSync('README.md', readmeContent, 'utf-8');
        console.log('‚úÖ README.md —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω!');
        console.log(`üìä –í—Å–µ–≥–æ —Å—Ç–∞—Ç–µ–π: ${ruArticles.length + articlesEn.length}`);
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ README.md:', error.message);
        process.exit(1);
    }
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—â–µ–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
    generateReadme();
}

module.exports = { generateReadme, extractTitle, scanDirectory, encodeMarkdownPath };